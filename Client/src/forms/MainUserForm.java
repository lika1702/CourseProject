package forms;

import forms.dialogs.ClientDialog;
import forms.dialogs.PieChartDialog;
import forms.dialogs.BarChartDialog;
import forms.dialogs.CalculateSumDialog;
import forms.dialogs.ContractDialog;
import client.Stream;
import data.*;
import java.awt.Image;
import java.io.File;
import tableModels.*;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.Year;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import patterns.TableModelFactory;

public class MainUserForm extends javax.swing.JFrame {

    private MyTableModels modelCurrency;
    private MyTableModels modelClient;
    private MyTableModels modelDeposite;
    private MyTableModels modelContract;
    private Image image;
    private TableModelFactory factory = new TableModelFactory();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ExitButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CurrencyTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        CheckClientSortDESC = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        CheckDepositeSortDESC = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        SortListContractCombo = new javax.swing.JComboBox<>();
        CheckContractSortDESC = new javax.swing.JCheckBox();
        SortListClientCombo = new javax.swing.JComboBox<>();
        ApplySortDeposite = new javax.swing.JButton();
        ApplySortClient = new javax.swing.JButton();
        ApplySortContract = new javax.swing.JButton();
        SortListDepositeCombo = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        FilterListClientCombo = new javax.swing.JComboBox<>();
        ClientValueField = new javax.swing.JTextField();
        ApplyFilterClient = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        FilterListDepositeCombo = new javax.swing.JComboBox<>();
        DepositeValueField = new javax.swing.JTextField();
        ApplyFilterDeposite = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        FilterListContractCombo = new javax.swing.JComboBox<>();
        ContractValueField = new javax.swing.JTextField();
        ApplyFilterContract = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        SearchListClientCombo = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        SearchListDepositeCombo = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        SearchListContractCombo = new javax.swing.JComboBox<>();
        ContractSearchValueField = new javax.swing.JTextField();
        DepositeSearchValueField = new javax.swing.JTextField();
        ClientSearchValueField = new javax.swing.JTextField();
        ApplySearchClient = new javax.swing.JButton();
        ApplySearchDeposite = new javax.swing.JButton();
        ApplySearchContract = new javax.swing.JButton();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableClient = new javax.swing.JTable();
        ButtonAddClient = new javax.swing.JButton();
        ButtonEditClient = new javax.swing.JButton();
        ButtonDeleteClient = new javax.swing.JButton();
        ButtonClientReportAll = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        ButtonClientReport = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableDeposite = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        ButtonDepositeReport = new javax.swing.JButton();
        ButtonDepositeReportAll = new javax.swing.JButton();
        ButtonCurrencyGraph = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableContract = new javax.swing.JTable();
        ButtonAddContract = new javax.swing.JButton();
        ButtonEditContract = new javax.swing.JButton();
        ButtonDeleteContract = new javax.swing.JButton();
        ButtonGraph = new javax.swing.JButton();
        PieChartButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        CalculateSumButton = new javax.swing.JButton();
        ButtonContractReport = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Учет депозитов");
        setIconImage(image);
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ExitButton.setBackground(new java.awt.Color(0, 156, 190));
        ExitButton.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ExitButton.setForeground(new java.awt.Color(255, 255, 255));
        ExitButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(15, 212, 255), new java.awt.Color(0, 175, 214), new java.awt.Color(0, 58, 71), new java.awt.Color(0, 112, 137)));
        ExitButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ExitButton.setLabel("Завершить работу");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 156, 190));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));

        CurrencyTable.setBackground(new java.awt.Color(240, 240, 240));
        CurrencyTable.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        CurrencyTable.setForeground(new java.awt.Color(30, 30, 30));
        CurrencyTable.setModel(modelCurrency);
        CurrencyTable.setGridColor(new java.awt.Color(204, 204, 204));
        CurrencyTable.setRowHeight(30);
        CurrencyTable.setSelectionBackground(new java.awt.Color(0, 156, 190));
        CurrencyTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        CurrencyTable.setShowGrid(true);
        CurrencyTable.setShowVerticalLines(false);
        jScrollPane1.setViewportView(CurrencyTable);

        jLabel1.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Курсы валют");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.setForeground(new java.awt.Color(30, 30, 30));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(30, 30, 30));
        jPanel1.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(30, 30, 30));
        jLabel2.setText("Задайте параметры для сортировки");

        CheckClientSortDESC.setBackground(new java.awt.Color(255, 255, 255));
        CheckClientSortDESC.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        CheckClientSortDESC.setForeground(new java.awt.Color(30, 30, 30));
        CheckClientSortDESC.setText("Обратный порядок");

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(30, 30, 30));
        jLabel5.setText("Клиенты");

        jLabel6.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(30, 30, 30));
        jLabel6.setText("Депозиты");

        CheckDepositeSortDESC.setBackground(new java.awt.Color(255, 255, 255));
        CheckDepositeSortDESC.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        CheckDepositeSortDESC.setForeground(new java.awt.Color(30, 30, 30));
        CheckDepositeSortDESC.setText("Обратный порядок");

        jLabel7.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(30, 30, 30));
        jLabel7.setText("Договора");

        SortListContractCombo.setBackground(new java.awt.Color(240, 240, 240));
        SortListContractCombo.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        SortListContractCombo.setForeground(new java.awt.Color(30, 30, 30));
        SortListContractCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Нет", "Номер договора", "ФИО", "Номер паспорта", "Наименование вклада", "Валюта", "Срок действия", "Стартовая сумма" }));

        CheckContractSortDESC.setBackground(new java.awt.Color(255, 255, 255));
        CheckContractSortDESC.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        CheckContractSortDESC.setForeground(new java.awt.Color(30, 30, 30));
        CheckContractSortDESC.setText("Обратный порядок");

        SortListClientCombo.setBackground(new java.awt.Color(240, 240, 240));
        SortListClientCombo.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        SortListClientCombo.setForeground(new java.awt.Color(30, 30, 30));
        SortListClientCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Нет", "Номер паспорта", "Фамилия", "Имя", "Отчество", "Дата рождения" }));
        SortListClientCombo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        ApplySortDeposite.setBackground(new java.awt.Color(230, 230, 230));
        ApplySortDeposite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonApply.png"))); // NOI18N
        ApplySortDeposite.setActionCommand("ApplySortDeposite");
        ApplySortDeposite.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ApplySortDeposite.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ApplySortDeposite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplySortDepositeActionPerformed(evt);
            }
        });

        ApplySortClient.setBackground(new java.awt.Color(230, 230, 230));
        ApplySortClient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonApply.png"))); // NOI18N
        ApplySortClient.setActionCommand("ApplySortClient");
        ApplySortClient.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ApplySortClient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ApplySortClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplySortClientActionPerformed(evt);
            }
        });

        ApplySortContract.setBackground(new java.awt.Color(230, 230, 230));
        ApplySortContract.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonApply.png"))); // NOI18N
        ApplySortContract.setActionCommand("ApplySortContract");
        ApplySortContract.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ApplySortContract.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ApplySortContract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplySortContractActionPerformed(evt);
            }
        });

        SortListDepositeCombo.setBackground(new java.awt.Color(240, 240, 240));
        SortListDepositeCombo.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        SortListDepositeCombo.setForeground(new java.awt.Color(30, 30, 30));
        SortListDepositeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Нет", "Код", "Наименование", "Процентная ставка", "Минимальная сумма", "Валюта" }));
        SortListDepositeCombo.setPreferredSize(new java.awt.Dimension(144, 23));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(SortListClientCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CheckClientSortDESC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                        .addComponent(ApplySortClient, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(SortListContractCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CheckContractSortDESC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ApplySortContract, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(SortListDepositeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CheckDepositeSortDESC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ApplySortDeposite, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(13, 13, 13)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SortListClientCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CheckClientSortDESC))
                    .addComponent(ApplySortClient, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CheckDepositeSortDESC)
                    .addComponent(ApplySortDeposite, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SortListDepositeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SortListContractCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CheckContractSortDESC)))
                    .addComponent(ApplySortContract, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Сортировка", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(30, 30, 30));
        jPanel2.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(30, 30, 30));
        jLabel3.setText("Задайте параметры для фильтрации");

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(30, 30, 30));
        jLabel11.setText("Клиенты");

        FilterListClientCombo.setBackground(new java.awt.Color(240, 240, 240));
        FilterListClientCombo.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        FilterListClientCombo.setForeground(new java.awt.Color(30, 30, 30));
        FilterListClientCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Нет", "Фамилия", "Имя", "Отчество" }));
        FilterListClientCombo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        ClientValueField.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        ClientValueField.setForeground(new java.awt.Color(30, 30, 30));
        ClientValueField.setText("Введите значение");
        ClientValueField.setSelectionColor(new java.awt.Color(0, 156, 190));

        ApplyFilterClient.setBackground(new java.awt.Color(230, 230, 230));
        ApplyFilterClient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonApply.png"))); // NOI18N
        ApplyFilterClient.setActionCommand("ApplySortClient");
        ApplyFilterClient.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ApplyFilterClient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ApplyFilterClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyFilterClientActionPerformed(evt);
            }
        });

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(30, 30, 30));
        jLabel12.setText("Депозиты");

        FilterListDepositeCombo.setBackground(new java.awt.Color(240, 240, 240));
        FilterListDepositeCombo.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        FilterListDepositeCombo.setForeground(new java.awt.Color(30, 30, 30));
        FilterListDepositeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Нет", "Наименование", "Валюта" }));
        FilterListDepositeCombo.setPreferredSize(new java.awt.Dimension(144, 23));

        DepositeValueField.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        DepositeValueField.setForeground(new java.awt.Color(30, 30, 30));
        DepositeValueField.setText("Введите значение");
        DepositeValueField.setSelectionColor(new java.awt.Color(0, 156, 190));

        ApplyFilterDeposite.setBackground(new java.awt.Color(230, 230, 230));
        ApplyFilterDeposite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonApply.png"))); // NOI18N
        ApplyFilterDeposite.setActionCommand("ApplySortClient");
        ApplyFilterDeposite.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ApplyFilterDeposite.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ApplyFilterDeposite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyFilterDepositeActionPerformed(evt);
            }
        });

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(30, 30, 30));
        jLabel13.setText("Договора");

        FilterListContractCombo.setBackground(new java.awt.Color(240, 240, 240));
        FilterListContractCombo.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        FilterListContractCombo.setForeground(new java.awt.Color(30, 30, 30));
        FilterListContractCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Нет", "ФИО", "Наименование вклада", "Валюта" }));

        ContractValueField.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        ContractValueField.setForeground(new java.awt.Color(30, 30, 30));
        ContractValueField.setText("Введите значение");
        ContractValueField.setSelectionColor(new java.awt.Color(0, 156, 190));

        ApplyFilterContract.setBackground(new java.awt.Color(230, 230, 230));
        ApplyFilterContract.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonApply.png"))); // NOI18N
        ApplyFilterContract.setActionCommand("ApplySortClient");
        ApplyFilterContract.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ApplyFilterContract.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ApplyFilterContract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyFilterContractActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(FilterListClientCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ClientValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(ApplyFilterClient, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(FilterListDepositeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DepositeValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ApplyFilterDeposite, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(FilterListContractCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ContractValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ApplyFilterContract, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(13, 13, 13)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FilterListClientCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClientValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ApplyFilterClient, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ApplyFilterDeposite, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DepositeValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(FilterListDepositeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ContractValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FilterListContractCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ApplyFilterContract, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Фильтрация", jPanel2);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setForeground(new java.awt.Color(30, 30, 30));
        jPanel4.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(30, 30, 30));
        jLabel4.setText("Задайте параметры для поиска");

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(30, 30, 30));
        jLabel14.setText("Клиенты");

        SearchListClientCombo.setBackground(new java.awt.Color(240, 240, 240));
        SearchListClientCombo.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        SearchListClientCombo.setForeground(new java.awt.Color(30, 30, 30));
        SearchListClientCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Нет", "Номер паспорта", "Фамилия", "Имя", "Отчество" }));
        SearchListClientCombo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(30, 30, 30));
        jLabel15.setText("Депозиты");

        SearchListDepositeCombo.setBackground(new java.awt.Color(240, 240, 240));
        SearchListDepositeCombo.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        SearchListDepositeCombo.setForeground(new java.awt.Color(30, 30, 30));
        SearchListDepositeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Нет", "Код", "Наименование" }));
        SearchListDepositeCombo.setPreferredSize(new java.awt.Dimension(144, 23));

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(30, 30, 30));
        jLabel16.setText("Договора");

        SearchListContractCombo.setBackground(new java.awt.Color(240, 240, 240));
        SearchListContractCombo.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        SearchListContractCombo.setForeground(new java.awt.Color(30, 30, 30));
        SearchListContractCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Нет", "Номер договора", "Наименование вклада", "Номер паспорта клиента", "ФИО", " " }));

        ContractSearchValueField.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        ContractSearchValueField.setForeground(new java.awt.Color(30, 30, 30));
        ContractSearchValueField.setText("Введите значение");
        ContractSearchValueField.setSelectionColor(new java.awt.Color(0, 156, 190));

        DepositeSearchValueField.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        DepositeSearchValueField.setForeground(new java.awt.Color(30, 30, 30));
        DepositeSearchValueField.setText("Введите значение");
        DepositeSearchValueField.setSelectionColor(new java.awt.Color(0, 156, 190));

        ClientSearchValueField.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        ClientSearchValueField.setForeground(new java.awt.Color(30, 30, 30));
        ClientSearchValueField.setText("Введите значение");
        ClientSearchValueField.setSelectionColor(new java.awt.Color(0, 156, 190));

        ApplySearchClient.setBackground(new java.awt.Color(230, 230, 230));
        ApplySearchClient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonApply.png"))); // NOI18N
        ApplySearchClient.setActionCommand("ApplySortClient");
        ApplySearchClient.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ApplySearchClient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ApplySearchClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplySearchClientActionPerformed(evt);
            }
        });

        ApplySearchDeposite.setBackground(new java.awt.Color(230, 230, 230));
        ApplySearchDeposite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonApply.png"))); // NOI18N
        ApplySearchDeposite.setActionCommand("ApplySortClient");
        ApplySearchDeposite.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ApplySearchDeposite.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ApplySearchDeposite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplySearchDepositeActionPerformed(evt);
            }
        });

        ApplySearchContract.setBackground(new java.awt.Color(230, 230, 230));
        ApplySearchContract.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonApply.png"))); // NOI18N
        ApplySearchContract.setActionCommand("ApplySortClient");
        ApplySearchContract.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ApplySearchContract.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ApplySearchContract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplySearchContractActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 285, Short.MAX_VALUE)
                        .addComponent(jLabel4))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(SearchListClientCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ClientSearchValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ApplySearchClient, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(SearchListDepositeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DepositeSearchValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ApplySearchDeposite, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(SearchListContractCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ContractSearchValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ApplySearchContract, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(13, 13, 13)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchListClientCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClientSearchValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ApplySearchClient, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ApplySearchDeposite, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DepositeSearchValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(SearchListDepositeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ContractSearchValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchListContractCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ApplySearchContract, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Поиск", jPanel4);

        jTabbedPane6.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane6.setForeground(new java.awt.Color(30, 30, 30));
        jTabbedPane6.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setForeground(new java.awt.Color(30, 30, 30));
        jPanel5.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N

        TableClient.setBackground(new java.awt.Color(240, 240, 240));
        TableClient.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        TableClient.setForeground(new java.awt.Color(30, 30, 30));
        TableClient.setModel(modelClient);
        TableClient.setGridColor(new java.awt.Color(204, 204, 204));
        TableClient.setRowHeight(30);
        TableClient.setSelectionBackground(new java.awt.Color(0, 156, 190));
        TableClient.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        TableClient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableClientMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TableClient);

        ButtonAddClient.setBackground(new java.awt.Color(230, 230, 230));
        ButtonAddClient.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonAddClient.setForeground(new java.awt.Color(255, 255, 255));
        ButtonAddClient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonAdd.png"))); // NOI18N
        ButtonAddClient.setActionCommand("Добавить");
        ButtonAddClient.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ButtonAddClient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonAddClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddClientActionPerformed(evt);
            }
        });

        ButtonEditClient.setBackground(new java.awt.Color(230, 230, 230));
        ButtonEditClient.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonEditClient.setForeground(new java.awt.Color(255, 255, 255));
        ButtonEditClient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonEdit.png"))); // NOI18N
        ButtonEditClient.setActionCommand("Редактировать");
        ButtonEditClient.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ButtonEditClient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonEditClient.setEnabled(false);
        ButtonEditClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEditClientActionPerformed(evt);
            }
        });

        ButtonDeleteClient.setBackground(new java.awt.Color(230, 230, 230));
        ButtonDeleteClient.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonDeleteClient.setForeground(new java.awt.Color(255, 255, 255));
        ButtonDeleteClient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonDelete.png"))); // NOI18N
        ButtonDeleteClient.setActionCommand("Удалить");
        ButtonDeleteClient.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ButtonDeleteClient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonDeleteClient.setEnabled(false);
        ButtonDeleteClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDeleteClientActionPerformed(evt);
            }
        });

        ButtonClientReportAll.setBackground(new java.awt.Color(230, 230, 230));
        ButtonClientReportAll.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonClientReportAll.setForeground(new java.awt.Color(30, 30, 30));
        ButtonClientReportAll.setText("О всех клиентах");
        ButtonClientReportAll.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ButtonClientReportAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonClientReportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonClientReportAllActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(30, 30, 30));
        jLabel9.setText("Графики и отчеты");

        ButtonClientReport.setBackground(new java.awt.Color(230, 230, 230));
        ButtonClientReport.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonClientReport.setForeground(new java.awt.Color(30, 30, 30));
        ButtonClientReport.setText("С открытым вкладом");
        ButtonClientReport.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ButtonClientReport.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonClientReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonClientReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1015, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonAddClient, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonEditClient, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonDeleteClient, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(ButtonClientReportAll, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonClientReport, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ButtonEditClient, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonAddClient, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonDeleteClient, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonClientReportAll, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonClientReport, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane6.addTab("Клиенты", jPanel5);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setForeground(new java.awt.Color(30, 30, 30));
        jPanel6.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N

        TableDeposite.setBackground(new java.awt.Color(240, 240, 240));
        TableDeposite.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        TableDeposite.setForeground(new java.awt.Color(30, 30, 30));
        TableDeposite.setModel(modelDeposite);
        TableDeposite.setGridColor(new java.awt.Color(204, 204, 204));
        TableDeposite.setRowHeight(30);
        TableDeposite.setSelectionBackground(new java.awt.Color(0, 156, 190));
        TableDeposite.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(TableDeposite);

        jLabel10.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(30, 30, 30));
        jLabel10.setText("Графики и отчеты");

        ButtonDepositeReport.setBackground(new java.awt.Color(230, 230, 230));
        ButtonDepositeReport.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonDepositeReport.setForeground(new java.awt.Color(30, 30, 30));
        ButtonDepositeReport.setText("Общее число вкладов");
        ButtonDepositeReport.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ButtonDepositeReport.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonDepositeReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDepositeReportActionPerformed(evt);
            }
        });

        ButtonDepositeReportAll.setBackground(new java.awt.Color(230, 230, 230));
        ButtonDepositeReportAll.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonDepositeReportAll.setForeground(new java.awt.Color(30, 30, 30));
        ButtonDepositeReportAll.setText("Отчет по вкладу");
        ButtonDepositeReportAll.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ButtonDepositeReportAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonDepositeReportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDepositeReportAllActionPerformed(evt);
            }
        });

        ButtonCurrencyGraph.setBackground(new java.awt.Color(230, 230, 230));
        ButtonCurrencyGraph.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonCurrencyGraph.setForeground(new java.awt.Color(30, 30, 30));
        ButtonCurrencyGraph.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bar.png"))); // NOI18N
        ButtonCurrencyGraph.setText("Кол-во по валюте");
        ButtonCurrencyGraph.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ButtonCurrencyGraph.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonCurrencyGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCurrencyGraphActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1015, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(ButtonDepositeReport, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonDepositeReportAll, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonCurrencyGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonDepositeReport, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonDepositeReportAll, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonCurrencyGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane6.addTab("Депозиты", jPanel6);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setForeground(new java.awt.Color(30, 30, 30));
        jPanel7.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N

        TableContract.setBackground(new java.awt.Color(240, 240, 240));
        TableContract.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        TableContract.setForeground(new java.awt.Color(30, 30, 30));
        TableContract.setModel(modelContract);
        TableContract.setGridColor(new java.awt.Color(204, 204, 204));
        TableContract.setRowHeight(30);
        TableContract.setSelectionBackground(new java.awt.Color(0, 156, 190));
        TableContract.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        TableContract.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableContractMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(TableContract);

        ButtonAddContract.setBackground(new java.awt.Color(230, 230, 230));
        ButtonAddContract.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonAddContract.setForeground(new java.awt.Color(255, 255, 255));
        ButtonAddContract.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonAdd.png"))); // NOI18N
        ButtonAddContract.setActionCommand("Добавить");
        ButtonAddContract.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ButtonAddContract.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonAddContract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddContractActionPerformed(evt);
            }
        });

        ButtonEditContract.setBackground(new java.awt.Color(230, 230, 230));
        ButtonEditContract.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonEditContract.setForeground(new java.awt.Color(255, 255, 255));
        ButtonEditContract.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonEdit.png"))); // NOI18N
        ButtonEditContract.setActionCommand("Редактировать");
        ButtonEditContract.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ButtonEditContract.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonEditContract.setEnabled(false);
        ButtonEditContract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEditContractActionPerformed(evt);
            }
        });

        ButtonDeleteContract.setBackground(new java.awt.Color(230, 230, 230));
        ButtonDeleteContract.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonDeleteContract.setForeground(new java.awt.Color(255, 255, 255));
        ButtonDeleteContract.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonDelete.png"))); // NOI18N
        ButtonDeleteContract.setActionCommand("Удалить");
        ButtonDeleteContract.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ButtonDeleteContract.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonDeleteContract.setEnabled(false);
        ButtonDeleteContract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDeleteContractActionPerformed(evt);
            }
        });

        ButtonGraph.setBackground(new java.awt.Color(230, 230, 230));
        ButtonGraph.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonGraph.setForeground(new java.awt.Color(30, 30, 30));
        ButtonGraph.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/bar.png"))); // NOI18N
        ButtonGraph.setText("Кол-во в год");
        ButtonGraph.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ButtonGraph.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonGraphActionPerformed(evt);
            }
        });

        PieChartButton.setBackground(new java.awt.Color(230, 230, 230));
        PieChartButton.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        PieChartButton.setForeground(new java.awt.Color(30, 30, 30));
        PieChartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pie.png"))); // NOI18N
        PieChartButton.setText("Доля вклада");
        PieChartButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        PieChartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PieChartButtonActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(30, 30, 30));
        jLabel8.setText("Графики и отчеты");

        CalculateSumButton.setBackground(new java.awt.Color(230, 230, 230));
        CalculateSumButton.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        CalculateSumButton.setForeground(new java.awt.Color(30, 30, 30));
        CalculateSumButton.setText("Сумма по вкладу");
        CalculateSumButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        CalculateSumButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CalculateSumButton.setEnabled(false);
        CalculateSumButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateSumButtonActionPerformed(evt);
            }
        });

        ButtonContractReport.setBackground(new java.awt.Color(230, 230, 230));
        ButtonContractReport.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonContractReport.setForeground(new java.awt.Color(30, 30, 30));
        ButtonContractReport.setText("Отчет");
        ButtonContractReport.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(230, 230, 230), new java.awt.Color(86, 86, 86), new java.awt.Color(147, 147, 147)));
        ButtonContractReport.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonContractReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonContractReportActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1015, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(ButtonContractReport, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(ButtonGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(PieChartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CalculateSumButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonAddContract, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonEditContract, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonDeleteContract, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ButtonEditContract, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ButtonAddContract, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ButtonDeleteContract, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ButtonGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PieChartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CalculateSumButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonContractReport, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );

        jTabbedPane6.addTab("Договора", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane6)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setBounds(0, 0, 1074, 657);
    }// </editor-fold>//GEN-END:initComponents

    public MainUserForm() {
        try {
            setCurrencyModel("SELECT * FROM Валюта");
            setClientModel("SELECT * FROM Клиент");
            setDepositeModel("SELECT * FROM Депозит");
            setContractModel("SELECT Клиент.Фамилия, Клиент.Имя, Клиент.Отчество, Договор.НомерПаспорта, НомерДоговора, СрокДействия, Депозит.Наименование, Депозит.ВалютаВклада, Единица, ГодЗаключения, НачальнаяСумма FROM Договор "
                    + "INNER JOIN Клиент ON Договор.НомерПаспорта=Клиент.НомерПаспорта INNER JOIN Депозит ON Договор.КодВклада=Депозит.Код");

            image = ImageIO.read(new File("src\\img\\ico.png"));
            initComponents();
        } catch (IOException ex) {
            Logger.getLogger(MainUserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setCurrencyModel(String executeStr) throws IOException {
        ArrayList<Object> currency = new ArrayList<>();
        Stream server = new Stream();
        server.sendInt(9);
        server.sendString(executeStr);
        int count = server.getInt();
        for (int i = 0; i < count; i++) {
            String[] data = server.getString().split(":");
            currency.add(new Currency(data[0], data[1], Double.parseDouble(data[2])));
        }
        modelCurrency = factory.createModel(TypeOfModel.CURRENCY_TABLE, currency);
    }

    public void setClientModel(String executeStr) throws IOException {
        ArrayList<Object> clients = new ArrayList<>();
        Stream server = new Stream();
        server.sendInt(8);
        server.sendString(executeStr);
        int count = server.getInt();
        for (int i = 0; i < count; i++) {
            String[] data = server.getString().split(":");
            clients.add(new Client(data[0], data[1], data[2], data[3], data[4], data[5]));
        }
        modelClient = factory.createModel(TypeOfModel.CLIENT_TABLE, clients);
    }

    public void setDepositeModel(String executeStr) throws IOException {
        ArrayList<Object> deposites = new ArrayList<>();
        Stream server = new Stream();
        server.sendInt(7);
        server.sendString(executeStr);
        int count = server.getInt();
        for (int i = 0; i < count; i++) {
            String[] data = server.getString().split(":");
            deposites.add(new Deposite(Integer.parseInt(data[0]), data[1], Double.parseDouble(data[2]), Double.parseDouble(data[3]), data[4], data[5]));
        }
        modelDeposite = factory.createModel(TypeOfModel.DEPOSITE_TABLE, deposites);
    }

    public void setContractModel(String executeStr) throws IOException {
        ArrayList<Object> contracts = new ArrayList<>();
        Stream server = new Stream();
        server.sendInt(6);
        server.sendString(executeStr);
        int count = Integer.parseInt(server.getString());
        for (int i = 0; i < count; i++) {
            String[] data = server.getString().split(":");
            contracts.add(new Contract.Builder()
                    .withContractCode(data[0])
                    .withName(data[1])
                    .withPassport(data[2])
                    .withTitle(data[3])
                    .withCurrency(data[4])
                    .withTerm(Double.parseDouble(data[5]))
                    .withMeasurement(data[6])
                    .withYear(Integer.parseInt(data[7]))
                    .withStartSum(Double.parseDouble(data[8]))
                    .build());
        }
        modelContract = factory.createModel(TypeOfModel.CONTRACT_TABLE, contracts);
    }

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        this.setVisible(false);
        SignInForm SigningIn = new SignInForm();
        SigningIn.setVisible(true);
        SigningIn.setLocationRelativeTo(null);
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Stream server = new Stream();
        server.sendString("END");
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    public void ChangeTable() {
        getContentPane().removeAll();
        initComponents();
        this.setLocationRelativeTo(null);
    }

    private void ApplySortClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplySortClientActionPerformed
        try {
            String sqlString = "SELECT * FROM Клиент ORDER BY ";
            String desc = "";
            if (CheckClientSortDESC.isSelected()) {
                desc = " DESC";
            }
            switch (SortListClientCombo.getSelectedIndex()) {
                case 0:
                    sqlString = "SELECT * FROM Клиент";
                    break;
                case 1:
                    sqlString += "НомерПаспорта" + desc;
                    break;
                case 2:
                    sqlString += "Фамилия" + desc;
                    break;
                case 3:
                    sqlString += "Имя" + desc;
                    break;
                case 4:
                    sqlString += "Отчество" + desc;
                    break;
                case 5:
                    sqlString += "ДатаРождения" + desc;
                    break;
            }
            setClientModel(sqlString);
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ApplySortClientActionPerformed

    private void ApplySortDepositeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplySortDepositeActionPerformed
        try {
            String sqlString = "SELECT * FROM Депозит ORDER BY ";
            String desc = "";
            if (CheckDepositeSortDESC.isSelected()) {
                desc = " DESC";
            }
            switch (SortListDepositeCombo.getSelectedIndex()) {
                case 0:
                    sqlString = "SELECT * FROM Депозит";
                    break;
                case 1:
                    sqlString += "Код" + desc;
                    break;
                case 2:
                    sqlString += "Наименование" + desc;
                    break;
                case 3:
                    sqlString += "ПроцентнаяСтавка" + desc;
                    break;
                case 4:
                    sqlString += "МинимальнаяСумма" + desc;
                    break;
                case 5:
                    sqlString += "Валюта" + desc;
                    break;
            }
            setDepositeModel(sqlString);
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ApplySortDepositeActionPerformed

    private void ApplySortContractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplySortContractActionPerformed
        try {
            String sqlString = "SELECT Клиент.Фамилия, Клиент.Имя, Клиент.Отчество, Договор.НомерПаспорта, НомерДоговора, СрокДействия, Депозит.Наименование, Депозит.ВалютаВклада, Единица, ГодЗаключения, НачальнаяСумма FROM Договор "
                    + "INNER JOIN Клиент ON Договор.НомерПаспорта=Клиент.НомерПаспорта INNER JOIN Депозит ON Договор.КодВклада=Депозит.Код ORDER BY ";
            String desc = "";
            if (CheckContractSortDESC.isSelected()) {
                desc = " DESC";
            }
            switch (SortListContractCombo.getSelectedIndex()) {
                case 0:
                    sqlString = "SELECT Клиент.Фамилия, Клиент.Имя, Клиент.Отчество, Договор.НомерПаспорта, НомерДоговора, СрокДействия, Депозит.Наименование, Депозит.ВалютаВклада, Единица, ГодЗаключения, НачальнаяСумма FROM Договор "
                            + "INNER JOIN Клиент ON Договор.НомерПаспорта=Клиент.НомерПаспорта INNER JOIN Депозит ON Договор.КодВклада=Депозит.Код";
                    break;
                case 1:
                    sqlString += "НомерДоговора" + desc;
                    break;
                case 2:
                    sqlString += "Клиент.Фамилия " + desc + ", Клиент.Имя " + desc + ", Клиент.Отчество " + desc;
                    break;
                case 3:
                    sqlString += "Договор.НомерПаспорта" + desc;
                    break;
                case 4:
                    sqlString += "Депозит.Наименование" + desc;
                    break;
                case 5:
                    sqlString += "Депозит.ВалютаВклада" + desc;
                    break;
                case 6:
                    sqlString += "СрокДействия" + desc;
                    break;
                case 7:
                    sqlString += "ГодЗаключения" + desc;
                    break;
                case 8:
                    sqlString += "НачальнаяСумма" + desc;
                    break;
            }
            setContractModel(sqlString);
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ApplySortContractActionPerformed

    private void TableClientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableClientMouseClicked
        if (TableClient.getSelectedRowCount() > 0) {
            ButtonEditClient.setEnabled(true);
            ButtonDeleteClient.setEnabled(true);
        } else {
            ButtonEditClient.setEnabled(false);
            ButtonDeleteClient.setEnabled(false);
        }
    }//GEN-LAST:event_TableClientMouseClicked

    private void ButtonDeleteClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDeleteClientActionPerformed
        String passport = (String) TableClient.getValueAt(TableClient.getSelectedRow(), 0);
        Stream server = new Stream();
        String executeStr = "DELETE FROM Клиент WHERE `НомерПаспорта`='" + passport + "'";
        server.sendInt(10);
        server.sendString(executeStr);

        JOptionPane.showMessageDialog(null, "Данные удалены.",
                "Удаление", JOptionPane.INFORMATION_MESSAGE);
        try {
            setClientModel("SELECT * FROM Клиент");
            setContractModel("SELECT Клиент.Фамилия, Клиент.Имя, Клиент.Отчество, Договор.НомерПаспорта, НомерДоговора, СрокДействия, Депозит.Наименование, Депозит.ВалютаВклада, Единица, ГодЗаключения, НачальнаяСумма FROM Договор "
                    + "INNER JOIN Клиент ON Договор.НомерПаспорта=Клиент.НомерПаспорта INNER JOIN Депозит ON Договор.КодВклада=Депозит.Код");
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonDeleteClientActionPerformed

    private void ButtonEditClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEditClientActionPerformed
        ClientDialog edit = new ClientDialog(this, true);
        edit.setPassport((String) TableClient.getValueAt(TableClient.getSelectedRow(), 0));
        edit.setSurname((String) TableClient.getValueAt(TableClient.getSelectedRow(), 1));
        edit.setName((String) TableClient.getValueAt(TableClient.getSelectedRow(), 2));
        edit.setPatronimyc((String) TableClient.getValueAt(TableClient.getSelectedRow(), 3));
        edit.setBirth((String) TableClient.getValueAt(TableClient.getSelectedRow(), 4));
        edit.setPhone(((String) TableClient.getValueAt(TableClient.getSelectedRow(), 5)).substring(5));
        edit.setLocationRelativeTo(null);
        edit.setVisible(true);

        Stream server = new Stream();
        String updateStr = "UPDATE Клиент SET Фамилия='" + edit.getSurname() + "', " + "Имя='" + edit.getName() + "', " + "Отчество='" + edit.getPatronimyc() + "', "
                + "НомерТелефона='+375" + edit.getPhone() + "' " + " WHERE НомерПаспорта='" + edit.getPassport() + "'";
        server.sendInt(11);
        server.sendString(updateStr);

        try {
            setClientModel("SELECT * FROM Клиент");
            setContractModel("SELECT Клиент.Фамилия, Клиент.Имя, Клиент.Отчество, Договор.НомерПаспорта, НомерДоговора, СрокДействия, Депозит.Наименование, Депозит.ВалютаВклада, Единица, ГодЗаключения, НачальнаяСумма FROM Договор "
                    + "INNER JOIN Клиент ON Договор.НомерПаспорта=Клиент.НомерПаспорта INNER JOIN Депозит ON Договор.КодВклада=Депозит.Код");
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonEditClientActionPerformed

    private void ButtonDeleteContractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDeleteContractActionPerformed
        String code = (String) TableContract.getValueAt(TableContract.getSelectedRow(), 0);
        Stream server = new Stream();
        String executeStr = "DELETE FROM Договор WHERE `НомерДоговора`='" + code + "'";
        server.sendInt(10);
        server.sendString(executeStr);

        JOptionPane.showMessageDialog(null, "Данные удалены.",
                "Удаление", JOptionPane.INFORMATION_MESSAGE);
        try {
            setContractModel("SELECT Клиент.Фамилия, Клиент.Имя, Клиент.Отчество, Договор.НомерПаспорта, НомерДоговора, СрокДействия, Депозит.Наименование, Депозит.ВалютаВклада, Единица, ГодЗаключения, НачальнаяСумма FROM Договор "
                    + "INNER JOIN Клиент ON Договор.НомерПаспорта=Клиент.НомерПаспорта INNER JOIN Депозит ON Договор.КодВклада=Депозит.Код");
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonDeleteContractActionPerformed

    private void ButtonEditContractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEditContractActionPerformed
        ContractDialog edit = new ContractDialog(this, true);
        edit.setContractCode((String) TableContract.getValueAt(TableContract.getSelectedRow(), 0));
        edit.setPassport((String) TableContract.getValueAt(TableContract.getSelectedRow(), 2));
        edit.setDeposite((String) TableContract.getValueAt(TableContract.getSelectedRow(), 3) + " " + (String) TableContract.getValueAt(TableContract.getSelectedRow(), 4));
        edit.setStartSumD((double) TableContract.getValueAt(TableContract.getSelectedRow(), 5) + "");
        String[] mas = ((String) TableContract.getValueAt(TableContract.getSelectedRow(), 6)).split(" ");
        edit.setTermD(mas[0]);
        edit.setTermMeasurement(mas[1]);
        edit.setYear((int) TableContract.getValueAt(TableContract.getSelectedRow(), 7));
        edit.setLocationRelativeTo(null);
        edit.setVisible(true);

        Stream server = new Stream();
        String updateStr = "UPDATE Договор SET КодВклада=" + edit.getDeposite() + ", СрокДействия=" + edit.getTerm() + ", "
                + "Единица='" + edit.getTermMeasurement() + "' WHERE НомерДоговора='" + edit.getContractCode() + "'";
        server.sendInt(11);
        server.sendString(updateStr);

        try {
            setContractModel("SELECT Клиент.Фамилия, Клиент.Имя, Клиент.Отчество, Договор.НомерПаспорта, НомерДоговора, СрокДействия, Депозит.Наименование, Депозит.ВалютаВклада, Единица, ГодЗаключения, НачальнаяСумма FROM Договор "
                    + "INNER JOIN Клиент ON Договор.НомерПаспорта=Клиент.НомерПаспорта INNER JOIN Депозит ON Договор.КодВклада=Депозит.Код");
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonEditContractActionPerformed

    private void TableContractMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableContractMouseClicked
        if (TableContract.getSelectedRowCount() > 0) {
            ButtonEditContract.setEnabled(true);
            ButtonDeleteContract.setEnabled(true);
            CalculateSumButton.setEnabled(true);
        } else {
            ButtonEditContract.setEnabled(false);
            ButtonDeleteContract.setEnabled(false);
            CalculateSumButton.setEnabled(false);
        }
    }//GEN-LAST:event_TableContractMouseClicked

    private void ButtonAddClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddClientActionPerformed
        ClientDialog edit = new ClientDialog(this, true);
        edit.setLocationRelativeTo(null);
        edit.SetEnabled();
        edit.setDialogTitle("Добавить новые данные");
        edit.setVisible(true);

        Stream server = new Stream();
        String executeStr = "INSERT INTO Клиент VALUES('" + edit.getPassport() + "', '" + edit.getSurname() + "', '"
                + edit.getName() + "', '" + edit.getPatronimyc() + "', '" + edit.getBirth() + "', '+375" + edit.getPhone() + "');";
        server.sendInt(12);
        server.sendString(executeStr);

        JOptionPane.showMessageDialog(null, "Данные добавлены.",
                "Добавление", JOptionPane.INFORMATION_MESSAGE);
        try {
            setClientModel("SELECT * FROM Клиент");
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonAddClientActionPerformed

    private void ButtonAddContractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddContractActionPerformed
        ContractDialog edit = new ContractDialog(this, true);
        edit.setLocationRelativeTo(null);
        edit.SetEnabled();
        edit.setDialogTitle("Добавить новые данные");
        int year = Year.now().getValue();
        edit.setYear(year);
        edit.setVisible(true);

        Stream server = new Stream();
        String executeStr = "INSERT INTO Договор VALUES('" + edit.getContractCode() + "', '" + edit.getPassport() + "', "
                + edit.getDeposite() + ", " + edit.getTerm() + ", '" + edit.getTermMeasurement() + "', " + edit.getYear() + ", " + edit.getStartSum() + ")";
        server.sendInt(12);
        server.sendString(executeStr);

        JOptionPane.showMessageDialog(null, "Данные добавлены.",
                "Добавление", JOptionPane.INFORMATION_MESSAGE);
        try {
            setContractModel("SELECT Клиент.Фамилия, Клиент.Имя, Клиент.Отчество, Договор.НомерПаспорта, НомерДоговора, СрокДействия, Депозит.Наименование, Депозит.ВалютаВклада, Единица, ГодЗаключения, НачальнаяСумма FROM Договор "
                    + "INNER JOIN Клиент ON Договор.НомерПаспорта=Клиент.НомерПаспорта INNER JOIN Депозит ON Договор.КодВклада=Депозит.Код");
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonAddContractActionPerformed

    private void ButtonGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonGraphActionPerformed
        BarChartDialog dlg = new BarChartDialog(this, true);
        dlg.setLocationRelativeTo(null);
        dlg.setVisible(true);

        Stream server = new Stream();
        String executeStr = "SELECT `ГодЗаключения`, `Депозит`.`Наименование`, COUNT(`ГодЗаключения`) AS Количество FROM `Договор` "
                + "INNER JOIN `Депозит` ON `Договор`.`КодВклада`=`Депозит`.`Код`";
        if (!dlg.getDeposite().equals("")) {
            executeStr += " WHERE Наименование='" + dlg.getDeposite() + "'";
        }
        if (!dlg.getSince().equals("")) {
            executeStr += " AND ГодЗаключения >= " + dlg.getSince();
        }
        if (!dlg.getFor().equals("")) {
            executeStr += " AND ГодЗаключения <= " + dlg.getFor();
        }
        executeStr += " GROUP BY `ГодЗаключения` ORDER BY `ГодЗаключения`;";
        server.sendInt(14);
        server.sendString(executeStr);
        try {
            int count = server.getInt();
            DefaultCategoryDataset dataSet = new DefaultCategoryDataset();
            for (int i = 0; i < count; i++) {
                String[] data = server.getString().split(":");
                dataSet.setValue(Integer.parseInt(data[1]), data[0], data[0]);
            }
            JFreeChart chart = ChartFactory.createBarChart3D("Диаграмма о количестве заключенных договоров", "Год", "Количество",
                    dataSet, PlotOrientation.VERTICAL, true, true, true);
            CategoryPlot P = (CategoryPlot) chart.getPlot();
            ChartFrame frame = new ChartFrame("Количество по годам", chart);
            frame.setVisible(true);
            frame.setSize(700, 700);
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonGraphActionPerformed

    private void PieChartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PieChartButtonActionPerformed
        PieChartDialog dlg = new PieChartDialog(this, true);
        dlg.setLocationRelativeTo(null);
        dlg.setVisible(true);

        Stream server = new Stream();
        String executeStr = "SELECT КодВклада, COUNT(КодВклада) AS Количество, Депозит.Наименование AS  Наименование, Депозит.ВалютаВклада FROM Договор INNER JOIN Депозит ON Договор.КодВклада=Депозит.Код GROUP BY КодВклада ORDER BY КодВклада;";
        server.sendInt(15);
        server.sendString(executeStr);
        try {
            int count = server.getInt();
            DefaultPieDataset dataSet = new DefaultPieDataset();
            ArrayList<String> depositeData = new ArrayList();
            int totalCount = 0;
            for (int i = 0; i < count; i++) {
                depositeData.add(server.getString());
                String[] data = depositeData.get(i).split(":");
                totalCount += Integer.parseInt(data[1]);
            }
            for (int i = 0; i < count; i++) {
                String[] data = depositeData.get(i).split(":");
                if (dlg.getMeasurement()) {
                    double percent = Double.parseDouble(data[1]) * 100 / totalCount;
                    dataSet.setValue(data[0] + " : " + percent + "%", percent);
                } else {
                    int value = Integer.parseInt(data[1]);
                    dataSet.setValue(data[0] + " : " + value, value);
                }
            }
            JFreeChart chart = ChartFactory.createPieChart("Диаграмма о долях договоров", dataSet, true, true, true);
            PiePlot P = (PiePlot) chart.getPlot();
            ChartFrame frame = new ChartFrame("Доли вкладов", chart);
            frame.setVisible(true);
            frame.setSize(700, 700);
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PieChartButtonActionPerformed

    private void ApplyFilterClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyFilterClientActionPerformed
        try {
            String sqlString = "SELECT * FROM Клиент WHERE ";
            String value = ClientValueField.getText();
            switch (FilterListClientCombo.getSelectedIndex()) {
                case 0:
                    sqlString = "SELECT * FROM Клиент";
                    break;
                case 1:
                    sqlString += "Фамилия LIKE '%" + value + "%'";
                    break;
                case 2:
                    sqlString += "Имя LIKE '%" + value + "%'";
                    break;
                case 3:
                    sqlString += "Отчество LIKE '%" + value + "%'";
                    break;
            }
            setClientModel(sqlString);
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ApplyFilterClientActionPerformed

    private void ApplyFilterDepositeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyFilterDepositeActionPerformed
        try {
            String sqlString = "SELECT * FROM Депозит WHERE ";
            String value = DepositeValueField.getText();
            switch (FilterListDepositeCombo.getSelectedIndex()) {
                case 0:
                    sqlString = "SELECT * FROM Депозит";
                    break;
                case 1:
                    sqlString += "Наименование LIKE '%" + value + "%'";
                    break;
                case 2:
                    sqlString += "ВалютаВклада LIKE '%" + value.toUpperCase() + "%'";
                    break;
            }
            setDepositeModel(sqlString);
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ApplyFilterDepositeActionPerformed

    private void ApplyFilterContractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyFilterContractActionPerformed
        try {
            String sqlString = "SELECT Клиент.Фамилия, Клиент.Имя, Клиент.Отчество, Договор.НомерПаспорта, НомерДоговора, СрокДействия, Депозит.Наименование, Депозит.ВалютаВклада, Единица, ГодЗаключения, НачальнаяСумма FROM Договор "
                    + "INNER JOIN Клиент ON Договор.НомерПаспорта=Клиент.НомерПаспорта INNER JOIN Депозит ON Договор.КодВклада=Депозит.Код WHERE ";
            String value = ContractValueField.getText();
            switch (FilterListContractCombo.getSelectedIndex()) {
                case 0:
                    sqlString = "SELECT Клиент.Фамилия, Клиент.Имя, Клиент.Отчество, Договор.НомерПаспорта, НомерДоговора, СрокДействия, Депозит.Наименование, Депозит.ВалютаВклада, Единица, ГодЗаключения, НачальнаяСумма FROM Договор "
                            + "INNER JOIN Клиент ON Договор.НомерПаспорта=Клиент.НомерПаспорта INNER JOIN Депозит ON Договор.КодВклада=Депозит.Код";
                    break;
                case 1:
                    sqlString += "Клиент.Фамилия LIKE '%" + value + "%' OR Клиент.Имя LIKE '%" + value + "%' OR Клиент.Отчество LIKE '%" + value + "%'";
                    break;
                case 2:
                    sqlString += "Депозит.Наименование LIKE '%" + value + "%'";
                    break;
                case 3:
                    sqlString += "Депозит.ВалютаВклада LIKE '%" + value.toUpperCase() + "%'";
                    break;
            }
            setContractModel(sqlString);
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ApplyFilterContractActionPerformed

    private void ApplySearchClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplySearchClientActionPerformed
        try {
            String sqlString = "SELECT * FROM Клиент WHERE ";
            String value = ClientSearchValueField.getText();
            switch (SearchListClientCombo.getSelectedIndex()) {
                case 0:
                    sqlString = "SELECT * FROM Клиент";
                    break;
                case 1:
                    sqlString += "НомерПаспорта ='" + value + "'";
                    break;
                case 2:
                    sqlString += "Фамилия = '" + value + "'";
                    break;
                case 3:
                    sqlString += "Имя ='" + value + "'";
                    break;
                case 4:
                    sqlString += "Отчество = '" + value + "'";
                    break;
            }
            setClientModel(sqlString);
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ApplySearchClientActionPerformed

    private void ApplySearchDepositeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplySearchDepositeActionPerformed
        try {
            String sqlString = "SELECT * FROM Депозит WHERE ";
            String value = DepositeSearchValueField.getText();
            switch (SearchListDepositeCombo.getSelectedIndex()) {
                case 0:
                    sqlString = "SELECT * FROM Депозит";
                    break;
                case 1:
                    sqlString += "Код=" + value;
                    break;
                case 2:
                    sqlString += "Наименование='" + value + "'";
                    break;
            }
            setDepositeModel(sqlString);
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ApplySearchDepositeActionPerformed
    private void ApplySearchContractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplySearchContractActionPerformed
        try {
            String sqlString = "SELECT Клиент.Фамилия, Клиент.Имя, Клиент.Отчество, Договор.НомерПаспорта, НомерДоговора, СрокДействия, Депозит.Наименование, Депозит.ВалютаВклада, Единица, ГодЗаключения, НачальнаяСумма FROM Договор "
                    + "INNER JOIN Клиент ON Договор.НомерПаспорта=Клиент.НомерПаспорта INNER JOIN Депозит ON Договор.КодВклада=Депозит.Код WHERE ";
            String value = ContractSearchValueField.getText();
            switch (SearchListContractCombo.getSelectedIndex()) {
                case 0:
                    sqlString = "SELECT Клиент.Фамилия, Клиент.Имя, Клиент.Отчество, Договор.НомерПаспорта, НомерДоговора, СрокДействия, Депозит.Наименование, Депозит.ВалютаВклада, Единица, ГодЗаключения, НачальнаяСумма FROM Договор "
                            + "INNER JOIN Клиент ON Договор.НомерПаспорта=Клиент.НомерПаспорта INNER JOIN Депозит ON Договор.КодВклада=Депозит.Код";
                    break;
                case 1:
                    sqlString += "НомерДоговора= '" + value + "'";
                    break;
                case 2:
                    sqlString += "Депозит.Наименование= '" + value + "'";
                    break;
                case 3:
                    sqlString += "Договор.НомерПаспорта= '" + value + "'";
                    break;
                case 4:
                    sqlString += "Клиент.Фамилия='" + value + "' OR Клиент.Имя ='" + value + "' OR Клиент.Отчество = '" + value + "'";
                    break;

            }
            setContractModel(sqlString);
            ChangeTable();
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ApplySearchContractActionPerformed

    private void CalculateSumButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculateSumButtonActionPerformed
        CalculateSumDialog dlg = new CalculateSumDialog(this, true);
        dlg.setLocationRelativeTo(null);
        dlg.setVisible(true);

        double resultSum = 0.0;
        Stream server = new Stream();
        String executeStr = "SELECT ПроцентнаяСтавка FROM Депозит WHERE Наименование='" + TableContract.getValueAt(TableContract.getSelectedRow(), 3)
                + "' AND ВалютаВклада='" + TableContract.getValueAt(TableContract.getSelectedRow(), 4) + "'";
        server.sendInt(18);
        server.sendString(executeStr);

        try {
            double percent = Double.parseDouble(server.getString());
            double startSum = (double) TableContract.getValueAt(TableContract.getSelectedRow(), 5);
            if (dlg.getFormula().equals("Формула простых процентов")) {
                resultSum = CalculateSumSI(startSum, percent, dlg.getPeriod());
            }
            if (dlg.getFormula().equals("Формула сложных процентов")) {
                double term = Double.parseDouble(((String) TableContract.getValueAt(TableContract.getSelectedRow(), 6)).split(" ")[0]);
                resultSum = CalculateSumCI(startSum, percent, dlg.getPeriod(), term);
            }
            JOptionPane.showMessageDialog(null, String.format("Итоговая сумма составит %.2f", resultSum),
                    "Результат расчета", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CalculateSumButtonActionPerformed

    public double CalculateSumSI(double startSum, double percent, double period) {
        return startSum * (1 + percent / 100 * period);
    }

    public double CalculateSumCI(double startSum, double percent, double period, double term) {
        return startSum * Math.pow((1 + percent * 0.01 * period / term), term);
    }

    private void ButtonClientReportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonClientReportAllActionPerformed
        ReportForm dlg = new ReportForm();
        dlg.setLocationRelativeTo(null);
        dlg.setTitle("Об общем числе клиентов банка");
        String reportText = "На текущую дату " + new SimpleDateFormat("dd.MM.yyyy").format(new Date())
                + " общее число клиентов составляет " + TableClient.getRowCount() + " (чел.)\nВ их числе\n\n";
        for (int i = 0; i < TableClient.getRowCount(); i++) {
            String fio = (String) TableClient.getValueAt(i, 0) + " " + (String) TableClient.getValueAt(i, 1) + " "
                    + (String) TableClient.getValueAt(i, 2) + " " + (String) TableClient.getValueAt(i, 3);
            reportText += "\t" + fio + "\n";
        }
        dlg.setText(reportText);
        dlg.setVisible(true);
    }//GEN-LAST:event_ButtonClientReportAllActionPerformed

    private void ButtonContractReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonContractReportActionPerformed
        ReportForm dlg = new ReportForm();
        dlg.setLocationRelativeTo(null);
        dlg.setTitle("Об общем числе заключенных договоров");
        String reportText = "На текущую дату " + new SimpleDateFormat("dd.MM.yyyy").format(new Date())
                + " общее число заключенных договоров на открытие вклада составляет " + TableContract.getRowCount() + "\nВ их числе\n\n";
        for (int i = 0; i < TableContract.getRowCount(); i++) {
            String str = (String) TableContract.getValueAt(i, 0) + " " + (String) TableContract.getValueAt(i, 1) + " "
                    + (String) TableContract.getValueAt(i, 2) + " " + (String) TableContract.getValueAt(i, 3);
            reportText += "\t" + str + "\n";
        }
        dlg.setText(reportText);
        dlg.setVisible(true);
    }//GEN-LAST:event_ButtonContractReportActionPerformed

    private void ButtonDepositeReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDepositeReportActionPerformed
        ReportForm dlg = new ReportForm();
        dlg.setLocationRelativeTo(null);
        dlg.setTitle("О предоставляемых депозитах банком");
        String reportText = "На текущую дату " + new SimpleDateFormat("dd.MM.yyyy").format(new Date())
                + " общее число депозитов составляет " + TableDeposite.getRowCount() + "\nВ их числе\n\n";
        for (int i = 0; i < TableDeposite.getRowCount(); i++) {
            String str = (int) TableDeposite.getValueAt(i, 0) + " " + (String) TableDeposite.getValueAt(i, 1) + " "
                    + (double) TableDeposite.getValueAt(i, 2) + " " + (double) TableDeposite.getValueAt(i, 3);
            reportText += "\t" + str + "\n";
        }
        dlg.setText(reportText);
        dlg.setVisible(true);
    }//GEN-LAST:event_ButtonDepositeReportActionPerformed

    private void ButtonDepositeReportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDepositeReportAllActionPerformed
        ReportForm dlg = new ReportForm();
        dlg.setLocationRelativeTo(null);
        dlg.setTitle("О предоставляемых депозитах банком");
        int withPartial = 0;
        String depositePartial = "";
        String deposite = "";
        for (int i = 0; i < TableDeposite.getRowCount(); i++) {
            String str = (int) TableDeposite.getValueAt(i, 0) + " " + (String) TableDeposite.getValueAt(i, 1) + " "
                    + (double) TableDeposite.getValueAt(i, 2) + " " + (double) TableDeposite.getValueAt(i, 3);
            if (((String) TableDeposite.getValueAt(i, 4)).equals("Да")) {
                withPartial++;
                depositePartial += "\t" + str + "\n";
            } else {
                deposite += "\t" + str + "\n";
            }
        }
        String reportText = "На текущую дату " + new SimpleDateFormat("dd.MM.yyyy").format(new Date())
                + " общее число депозитов составляет " + TableDeposite.getRowCount() + "\nС возможностью частичного снятия " + withPartial
                + "\nВ их числе\n\n" + depositePartial + "\n\nА также без возможности частичного снтия " + (TableDeposite.getRowCount() - withPartial)
                + "\nВ их числе\n\n" + deposite;
        dlg.setText(reportText);
        dlg.setVisible(true);
    }//GEN-LAST:event_ButtonDepositeReportAllActionPerformed

    private void ButtonClientReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonClientReportActionPerformed
        Stream server = new Stream();
        String executeStr = "SELECT Клиент.Фамилия, Клиент.Имя, Клиент.Отчество, Клиент.НомерПаспорта FROM Договор INNER JOIN Клиент ON "
                + "Договор.НомерПаспорта=Клиент.НомерПаспорта GROUP BY Клиент.НомерПаспорта";
        server.sendInt(4);
        server.sendString(executeStr);
        ReportForm dlg = new ReportForm();
        dlg.setLocationRelativeTo(null);
        dlg.setTitle("Об общем числе вкладчиков банка");

        try {
            int count = server.getInt();
            String reportText = "На текущую дату " + new SimpleDateFormat("dd.MM.yyyy").format(new Date())
                    + " общее число клиентов, заключивших договор на открытие вклада\nсоставляет " + count + " (чел.)\nВ их числе\n\n";
            for (int i = 0; i < count; i++) {
                String fio = server.getString().replace(":", " ");
                reportText += "\t" + fio + "\n";
            }
            dlg.setText(reportText);
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        dlg.setVisible(true);
    }//GEN-LAST:event_ButtonClientReportActionPerformed

    private void ButtonCurrencyGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCurrencyGraphActionPerformed
        Stream server = new Stream();
        String executeStr = "SELECT `ВалютаВклада`, COUNT(`ВалютаВклада`) AS Количество FROM `Депозит` GROUP BY `ВалютаВклада`";
        server.sendInt(19);
        server.sendString(executeStr);
        try {
            int count = server.getInt();
            DefaultCategoryDataset dataSet = new DefaultCategoryDataset();
            for (int i = 0; i < count; i++) {
                String[] data = server.getString().split(":");
                dataSet.setValue(Integer.parseInt(data[1]), data[0], data[0]);
            }
            JFreeChart chart = ChartFactory.createBarChart("Диаграмма о количестве вкладов в валюте", "Валюта", "Количество",
                    dataSet, PlotOrientation.HORIZONTAL, true, true, true);
            CategoryPlot P = (CategoryPlot) chart.getPlot();
            ChartFrame frame = new ChartFrame("Количество по валютам", chart);
            frame.setVisible(true);
            frame.setSize(700, 700);
        } catch (IOException ex) {
            Logger.getLogger(MainAdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ButtonCurrencyGraphActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUserForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyFilterClient;
    private javax.swing.JButton ApplyFilterContract;
    private javax.swing.JButton ApplyFilterDeposite;
    private javax.swing.JButton ApplySearchClient;
    private javax.swing.JButton ApplySearchContract;
    private javax.swing.JButton ApplySearchDeposite;
    private javax.swing.JButton ApplySortClient;
    private javax.swing.JButton ApplySortContract;
    private javax.swing.JButton ApplySortDeposite;
    private javax.swing.JButton ButtonAddClient;
    private javax.swing.JButton ButtonAddContract;
    private javax.swing.JButton ButtonClientReport;
    private javax.swing.JButton ButtonClientReportAll;
    private javax.swing.JButton ButtonContractReport;
    private javax.swing.JButton ButtonCurrencyGraph;
    private javax.swing.JButton ButtonDeleteClient;
    private javax.swing.JButton ButtonDeleteContract;
    private javax.swing.JButton ButtonDepositeReport;
    private javax.swing.JButton ButtonDepositeReportAll;
    private javax.swing.JButton ButtonEditClient;
    private javax.swing.JButton ButtonEditContract;
    private javax.swing.JButton ButtonGraph;
    private javax.swing.JButton CalculateSumButton;
    private javax.swing.JCheckBox CheckClientSortDESC;
    private javax.swing.JCheckBox CheckContractSortDESC;
    private javax.swing.JCheckBox CheckDepositeSortDESC;
    private javax.swing.JTextField ClientSearchValueField;
    private javax.swing.JTextField ClientValueField;
    private javax.swing.JTextField ContractSearchValueField;
    private javax.swing.JTextField ContractValueField;
    private javax.swing.JTable CurrencyTable;
    private javax.swing.JTextField DepositeSearchValueField;
    private javax.swing.JTextField DepositeValueField;
    private javax.swing.JButton ExitButton;
    private javax.swing.JComboBox<String> FilterListClientCombo;
    private javax.swing.JComboBox<String> FilterListContractCombo;
    private javax.swing.JComboBox<String> FilterListDepositeCombo;
    private javax.swing.JButton PieChartButton;
    private javax.swing.JComboBox<String> SearchListClientCombo;
    private javax.swing.JComboBox<String> SearchListContractCombo;
    private javax.swing.JComboBox<String> SearchListDepositeCombo;
    private javax.swing.JComboBox<String> SortListClientCombo;
    private javax.swing.JComboBox<String> SortListContractCombo;
    private javax.swing.JComboBox<String> SortListDepositeCombo;
    private javax.swing.JTable TableClient;
    private javax.swing.JTable TableContract;
    private javax.swing.JTable TableDeposite;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane6;
    // End of variables declaration//GEN-END:variables
}
