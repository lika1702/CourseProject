package forms.dialogs;

import client.Stream;
import data.User;
import forms.MainUserForm;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import tableModels.UserTableModel;

public class EmailSendDialog extends javax.swing.JDialog {

    private TableModel modelUser;

    public EmailSendDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            setUserModel("SELECT * FROM Пользователь");
        } catch (IOException ex) {
            Logger.getLogger(MainUserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
    }

    public void setUserModel(String executeStr) throws IOException {
        ArrayList<User> users = new ArrayList<>();
        Stream server = new Stream();
        server.sendInt(16);
        server.sendString(executeStr);
        int count = server.getInt();
        for (int i = 0; i < count; i++) {
            String[] data = server.getString().split(":");
            users.add(new User(data[0], data[4], false));
        }
        modelUser = new TableUserModel(users);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextField = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        ThemeField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableUserE = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        ButtonOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Написать письмо");

        jLabel1.setFont(new java.awt.Font("Arial", 3, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(30, 30, 30));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Написать письмо");

        TextField.setColumns(20);
        TextField.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        TextField.setForeground(new java.awt.Color(30, 30, 30));
        TextField.setRows(10);
        TextField.setPreferredSize(new java.awt.Dimension(200, 144));
        TextField.setSelectionColor(new java.awt.Color(0, 156, 190));
        jScrollPane1.setViewportView(TextField);

        jLabel2.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jLabel2.setText("Тема письма");

        ThemeField.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        ThemeField.setForeground(new java.awt.Color(30, 30, 30));
        ThemeField.setSelectionColor(new java.awt.Color(0, 156, 190));

        TableUserE.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        TableUserE.setForeground(new java.awt.Color(30, 30, 30));
        TableUserE.setModel(modelUser);
        TableUserE.setEditingColumn(2);
        TableUserE.setRowHeight(20);
        TableUserE.setSelectionBackground(new java.awt.Color(0, 156, 190));
        TableUserE.setSelectionForeground(new java.awt.Color(254, 254, 254));
        jScrollPane2.setViewportView(TableUserE);

        jLabel3.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jLabel3.setText("Выберите получателей");

        ButtonOK.setBackground(new java.awt.Color(0, 156, 190));
        ButtonOK.setFont(new java.awt.Font("Arial", 2, 16)); // NOI18N
        ButtonOK.setForeground(new java.awt.Color(255, 255, 255));
        ButtonOK.setText("Отправить");
        ButtonOK.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(15, 212, 255), new java.awt.Color(0, 175, 214), new java.awt.Color(0, 58, 71), new java.awt.Color(0, 112, 137)));
        ButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(ThemeField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(ButtonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ThemeField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ButtonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String getSubject() {
        return ThemeField.getText();
    }

    public String getText() {
        return TextField.getText();
    }

    public String getRecipients() {
        String recipients = "";
        for (int i = 0; i < TableUserE.getRowCount(); i++) {
            if ((boolean) TableUserE.getValueAt(i, 2) == true) {
                recipients += (String) TableUserE.getValueAt(i, 1) + ", ";
            }
        }
        return recipients;
    }

    private void ButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonOKActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_ButtonOKActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmailSendDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmailSendDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmailSendDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmailSendDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EmailSendDialog dialog = new EmailSendDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private class User {

        String login;
        String email;
        boolean recipient;

        public User(String login, String email, boolean recipient) {
            this.login = login;
            this.email = email;
            this.recipient = recipient;
        }

        public void setLogin(String login) {
            this.login = login;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public void setRecipient(boolean recipient) {
            this.recipient = recipient;
        }

        public String getLogin() {
            return this.login;
        }

        public String getEmail() {
            return this.email;
        }

        public boolean isRecipient() {
            return this.recipient;
        }
    }

    private class TableUserModel extends AbstractTableModel {

        private int colnum = 3;
        private int rownum;

        private List<User> user;

        public TableUserModel(List<User> user) {
            this.user = user;
        }

        @Override
        public int getRowCount() {
            return user.size();
        }

        @Override
        public int getColumnCount() {
            return colnum;
        }

        public String getColumnName(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return "Логин";
                case 1:
                    return "Почта";
                case 2:
                    return "Получатель";
            }
            return "";
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            User data = user.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return data.getLogin();
                case 1:
                    return data.getEmail();
                case 2:
                    return data.isRecipient();
            }
            return "";
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return String.class;
                case 1:
                    return String.class;
                case 2:
                    return Boolean.class;
            }
            return String.class;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            if (columnIndex == 2) {
                return true;
            }
            return false;
        }

        @Override
        public void setValueAt(Object value, int rowIndex, int columnIndex) {
            User data = user.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    data.setLogin((String) value);
                case 1:
                    data.setEmail((String) value);
                case 2:
                    data.setRecipient((boolean) value);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonOK;
    private javax.swing.JTable TableUserE;
    private javax.swing.JTextArea TextField;
    private javax.swing.JTextField ThemeField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
